title: Building a Simple TORCS AI Agent (4/11): Aerodynamics and Stability Controls
date: 2018-12-09 10:00
category: Games
authors: Didier Gohourou
summary: Incorporating aerodynamics and stability for better performance.
slug: torcs-ai-tuto-4
lang: en


This is the fourth chapter of a tutorial for building an AI agent for the racing 
game TORCS. In this chapter, we will learn to break, change gears and drive
faster.

* [Table of Contents]({filename}torcs-ai-tuto-1.md#table_of_contents)
* [Previous: Acceleration]({filename}torcs-ai-tuto-2.md)
* [Brakes and Gears](#)
	* [Title](#)
	* [Title](#)
* [Next: Steering and Trajectory]({filename}torcs-ai-tuto-4.md)

# Accelerating the right way

Maybe you are expecting that because we will learn to brake, we can set the 
accelerator to 1.0 whenever we move forward right?! I am afraid we can't !
We cannot go full speed on every section of a track. If our car is on a straight 
line then we can do whatever we want to the accelerator, meaning  we can just 
set it to 1.0 (<del>Your dream is realized!</del>). But on a turn section, 
there is a limited amount of speed we have to respect. Otherwise, we migth 
**understeer** and go off road.

Understeer?... Here is a quote from 
[Wikipedia](https://en.wikipedia.org/wiki/Understeer_and_oversteer) to the rescue.
> Understeer and oversteer are vehicle dynamics terms used to describe the 
> sensitivity of a vehicle to steering. Oversteer is what occurs when a car turns 
> (steers) by more than the amount commanded by the driver. Conversely, understeer 
> is what occurs when a car steers less than the amount commanded by the driver. 

![Understeer and Oversteer]({static}/images/2018-12/understeer-oversteer.png)

So we need to know what amount of speed we can apply to safely pass a turn.
We will resort to an equation from physics. <del>Stay with me</del>. 

$$ {mv^2 \over r} = {mg\mu} $$

Where: 

* $m$ : is the current car mass (kg)
* $v$ : current speed (m/s)
* $r$ : radius of the turn's segment(m) 
* $\mu$ : friction coefficient
* $g$ : the gravity of earth 9.80665 (m/s^2)

The left part of the equation is the **centrifugal force** and the left side is 
the **centripetal force** created by the friction of the turning wheels of our 
car. 
Here is a quote from an 
[article](https://www.diffen.com/difference/Centrifugal_Force_vs_Centripetal_Force) 
that explain those two forces. 
> Centrifugal force (Latin for "center fleeing") describes the tendency of an 
> object following a curved path to fly outwards, away from the center of the 
> curve. It's not really a force; it results from inertia â€” the tendency of an 
> object to resist any change in its state of rest or motion. Centripetal force 
> is a real force that counteracts the centrifugal force and prevents the object 
> from "flying out," keeping it moving instead with a uniform speed along a 
> circular path. 

Let's picture what we are talking about.

![Centrifugal and Centripetal forces]({static}/images/2018-12/centrifugal-centripetal.png)

We find the appropriate speed by expressing $v$ from the equation above, which 
yield:

$$ v = \sqrt{g \mu r} $$

This is a simplified version of the real appropriate speed value. We assume that 
all wheels have the same $\mu$, and the weight is equally distributed over all 
wheels. The coefficient $\mu$ with the friction coefficient which normally is 
a function with many parameters includind the relative speed vector between the  
surfaces, the current load, the shape of the patch, the temperature, etc.

With our result, let's create a function that returns the appropriate (allowed) 
speed on a segment of the track. We declare it in _carcontroller.h_ within the 
`CarController` class interface. 

```cpp
float  CarController::GetAllowedSpeed(tTrackSeg* segment);
```

and define it in _carcontroller.cpp_. 

```cpp
/**
 * Compute the allowed speed on a segment.
 * */
float  CarController::GetAllowedSpeed(tTrackSeg* segment)
{
	if (segment->type == TR_STR){
		return FLT_MAX; // Max float number 
	} else {
		float mu = segment->surface->kFriction;
		float r = segment->radius;
		return sqrt(mu * G * r);
	}
}
```
`TR_STR` is a straight segment, there is also `TR_RGT` for a right curve and 
`TR_LFT` for a left curve, from _track.h_.


To prevent the car from going over the allowed speed of a given segment, we need 
to know how much throttle to apply on the acceleretor pedal. In TORCS the 
acceleration throttle value is between 0 and 1, and can be deduced by 
normalizing the car engine's given revolution per minute (rpm) by its rpm redline
i.e the maximum revolution per minute the car's engine can operate at.

$$
accelerator\ throttle = \frac{rpm}{rpm\ redline} 
$$

If we also express the angular speed of the wheel $\omega = \theta / t$ 
with the linear speed $v = \omega \times \theta$ we have $\omega = v / r$
Since the angular speed is also equal to the rpm divided by the gear ratio, 
we have the following relation: 

$$
\begin{align*}
\frac{v}{r}& = \frac{rpm}{gear\ ratio} \\
rpm& = \frac{v \times gear\ ratio}{r} 
\end{align*}
$$

Where 

* $v$ is the speed of the car (m/s)
* $r$ is the radius of the spinning wheel (m)
* $rpm$ ie the engine's revolution per minute (rad/s)
* $gear\ ratio$ the ratio of the angular velocity fo input gear (engine's rpm) 
and the angular velocity output gear (the wheel). 

We obtain the desired accelerator throttle by plugin the expression of $rpm$ 
into the one of the $accelerator\ throttle$. 

$$
accelerator\ throttle = \frac{(v \times gear\ ratio) / r}{rpm\ redline}
$$

We rewrite the `GetAcceleration()` method with the result. It basically says 
if with our current speed we can accelerate to the max without stepping over 
the allowed speed of the segment, we go full throttle. Else, we compute the 
right amount of  of throttle to apply on the accelerator pedal.

```cpp
float CarController::GetAcceleration()
{
	float acceleration = 0.0;
	float allowed_speed = GetAllowedSpeed(car->_trkPos.seg);
	if (allowed_speed > car->_speed_x + ACCELERATION_MARGIN){
		acceleration = 1.0;
	} else {
		float gear_ratio = car->_gearRatio[car->_gear + car->_gearOffset];
		float rpm_redline = car->_enginerpmRedLine;
		float wheel_radius = car->_wheelRadius(REAR_RGT);
		acceleration = (allowed_speed * gear_ratio / wheel_radius) / rpm_redline;
	}
	return acceleration;
}
```
We finish this part by defining the constants G (gravity) and FULL\_THROTTLE 
in _carcontroller.cpp_.

```cpp
const float CarController::G = 9.81; // [m/s^2]
const float CarController::ACCELERATION_MARGIN = 1.0; // [m/s]
```

and we define them in _carcontroller.h_ among the public element of the 
`CarController` class.

```cpp
		static const float G;
		static const float ACCELERATION_MARGIN;
```

# Braking Basics

## Checking the distance

As we previously saw, there is a speed limitation for turn segments. If we 
approach a turn segment at a speed higher than the allowed speed of that turn 
segment, we need to reduce our speed to the given allowed speed, before engaging 
that turn segment. For that, we need to brake. 

We need to know in advance when to apply the brakes. i.e. at what distance from the 
turn we have to start braking. We can compute the braking distance using the 
following equation of energies. 

$$
\underbrace{\frac{m \cdot v_1^2}{2}}_{\text{Current kinetic energy}} - \underbrace{\frac{m \cdot v_2^2}{2}}_{\text{Desired kinetic energy}} = \underbrace{m \cdot g \cdot \mu \cdot s}_{\text{Energy 'burned' by the brakes over distance s}}
$$

Where 

* $m$ is the mass of the car (kg)
* $v_1$ is the current speed of the car (m/s)
* $v_2$ is the allowed speed on the turn segment, or targeted portion of the track
 (m/s)
* $g$ is the gravity constant
* $\mu$ is the friction coefficient 
* $s$ is the distance necessary to brake (m)

We have 

$$
s = \frac{v_1^2 - v_2^2}{2 \cdot g \cdot \mu}
$$

We also need a mechanism to gradually look ahead from the current position of 
the car to a potential segment with an allowed speed lower than the current speed 
of the car, up to a given distance. The lookahead mechanism will start with the 
distance from the car to the end of the current segment. Let's implement a utility 
function to get this initial distance. 

in _carcontroller.cpp_ add

```cpp
/**
 * Measure the distance from the current position of the car 
 * to the end of the segment the car is on.
 */
float CarController::DistanceFromCarToSegmentEnd()
{
	auto car_position = car->_trkPos;
	auto segment = car_position.seg;
	if (segment->type == TR_STR){
		return segment->length - car_position.toStart;
	} else {
		return (segment->arc - car_position.toStart) * segment->radius;
	}
}
```
As you might see, if the segement is a straight, we simply do a substraction else 
the arc of the radius comes into play.

Note that the maximum distance up to which we check for a turn to slow down is 
a special case of the distance formula $s$ where $v_2 = 0$. Meaning in case 
we have to completely stop the car. This yield $s = v_1^2 / (2 \cdot g \cdot \mu)$

The illustration below gives an idea of the 'look ahead' mechanism. 

![Look ahead]({static}/#)

## Braking

We will now implement our breaking mechanism. In case we are on a segment with a 
speed higher than the allowed speed on that segment, we brake. Otherwise we first 
consider a maximum distance up to which we check for turns that requires to 
decrease our speed. Then we gradually 'look ahead' up to that maximum distance 
for potential turns for which we need to slow down. If we find one, we check 
if the required distance we need to brake to match the allowed speed of that 
turn is greater than the distance we currently are (looking ahead) to that turn. 
If so we apply the brake. For every other conditions, we do not brake.


Here is the implementation of basic braking in _carcontroller.cpp_

```cpp
float CarController::GetBrake()
{
	float brake = 0.0;
	tTrackSeg* segment = car->_trkPos.seg;
	float speed = car->_speed_x;
	float allowed_speed = GetAllowedSpeed(segment);
	float mu = segment->surface->kFriction;
	float look_ahead_distance_max = pow(speed, 2) / (2.0 * mu * G);
	float look_ahead_distance = DistanceFromCarToSegmentEnd();

	if (allowed_speed < speed) {
		brake = 1.0;
	}
	segment = segment->next;
	while(look_ahead_distance < look_ahead_distance_max){
		allowed_speed = GetAllowedSpeed(segment);
		if (allowed_speed < speed) {
			float brake_distance = 
					(pow(speed, 2) - pow(allowed_speed, 2)) / (2.0 * mu * G);
			if (brake_distance > look_ahead_distance){
				brake = 1.0;
				break;
			}
		} 
		look_ahead_distance += segment->length;
		segment = segment->next;
	}
	return brake;
}
```

## Updating related methods

Let's make an update in the `Drive` method such that we accelerate only if we 
are not braking.

```cpp
void CarController::Drive(tSituation* situation)
{
    memset((void *)&car->ctrl, 0, sizeof(tCarCtrl)); // reset the values

	float car_angle = CurrentCarAngle(situation);

    car->_steerCmd = GetSteering(car_angle);
    car->_gearCmd = GetGear(); 
    car->_brakeCmd = GetBrake(); 
	if (car->_brakeCmd == 0.0){
    	car->_accelCmd = GetAcceleration(); 
	} else {
		car->_accelCmd = 0.0;
	}
}
```

Let's fix the gear to 4, for a test drive.

```cpp
float CarController::GetGear()
{
	return 4; 
}
```

Now let's declare the newly defined method within the class declaration in 
_carcontroller.h_.

```cpp
	float DistanceFromCarToSegmentEnd();
```

Time for a test drive.

[insert video]

# Shifting Gears

We will implement a simple yet efficient gear shifting mecanism. 

For now we are only moving forward, so if we are in neutral or reverse, 
we shift to the 1st gear. Otherwise we compute the maximum speed allowed 
at the current gear we are at, by multiplying the angular speed of the 
engine by the wheel radius and a 'shift constant' which represent a percentage 
of the rpm red line. If the product is less than the car speed, we shift up. 
Else, we check if we can shift down by first ensuring we are at a gear higher 
than 1. We then compute the maximum speed allowed at the gear lower than the 
current one. If the maximum speed allowed at the lower gear is lower than our 
current speed, we down shift. Note that we added a shift margin to prevent 
oscillating the gear up and down.

Here is the code for the shifting mechanism, implemented in `GetGear()`

```cpp
float CarController::GetGear()
{
	if (car->_gear <= 0)
		return 1.0;
	float gear_ratio_up = car->_gearRatio[car->_gear + car->_gearOffset];
	float omega = car->_enginerpmRedLine / gear_ratio_up;
	float wheel_radius = car->_wheelRadius(REAR_RGT);
	if (omega * wheel_radius * SHIFT < car->_speed_x){
		return car->_gear + 1;
	} else if (car->_gear > 1) {
		float gear_ratio_down = car->_gearRatio[car->_gear + car->_gearOffset - 1];
		omega = car->_enginerpmRedLine / gear_ratio_down;
		if (omega * wheel_radius * SHIFT < car->_speed_x + SHIFT_MARGIN) {
			return car->_gear - 1;
		}
	}
	return car->_gear; 
}
```

Let's define the new constants at the begining of _carcontroller.cpp_
```cpp
const float CarController::SHIFT = 0.9; // [-] (% of rpm red line)
const float CarController::SHIFT_MARGIN = 4.0; // [m/s]
```
And declare them in _carcontroller.h_
```cpp
		static const float SHIFT;
		static const float SHIFT_MARGIN;
```

Let's do another test drive

[insert video]

# Considering aerodynamics

So far, we omitted many variables to simplify computations. Now we will include 
an additional concept that plays a major role on our car performance: aerodynamics. 

Aerodynamics can be defined as the study of the motion of air on a solid body. 
The figure below illustrate different aerodynamic forces applied on a car at 
speed: the drag, the lift and the downforce. There are also some other ones like
the yaw moment (not represented here). We will take into account the downforce 
and the drag in our calculations.

![Aerodynamic Forces]({static}/images/2019-01/aerodynamics.png)

Going in depth in explanation of aerodynamic phenomenon might be a bit out 
of scope of this tutorial. <del>This chapter is actually a bit lenghty right.</del> 
But if you are interested, some good resources for our topic are: 

* [Race car Aerodynamics basics and design](https://www.buildyourownracecar.com/race-car-aerodynamics-basics-and-design/)
* [Aerodynamics](https://www.nas.nasa.gov/About/Education/Racecar/aerodynamics.html)

We will revisit the speed limit in turns and the braking mechanism with 
aerodynamics.

## Accessing the default car setup 

Do you remember the directory where we listed the available cars? Well, within 
each car directory there are various files among which an xml one that defines 
our car's properties, including the setup. In our case, the xml properties file 
is at `/usr/local/share/games/torcs/cars/car1-trb1/car1-trb1.xml`. 
These setup are used by default for our AI agent car.

We will discuss more about managing car setup in coming chapters. For now, we need 
to get some setup from the file, relative to aerodynamics. 

One function we will use to access numerical values in the default setup file is 
`GfParmGetNum`. The sections of interest in `car1-trb1.xml` is the following: 

```xml
	<section name="Aerodynamics">
		<attnum name="Cx" min="0.20" max="2.0" val="0.35"/>
		<attnum name="front area" unit="m2" min="1.0" max="3.0" val="1.92"/>
		<attnum name="front Clift" min="0.0" max="1.5" val="0.69"/>
		<attnum name="rear Clift" min="0.0" max="1.5" val="0.7"/>
	</section>
	
	<section name="Front Wing">
		<attnum name="area" unit="m2" val="0.25"/>
		<attnum name="angle" unit="deg" min="0" max="12" val="6"/>
		<attnum name="xpos" unit="m" val="2.20"/>
		<attnum name="zpos" unit="m" val="0.04"/>
	</section>
	
	<section name="Rear Wing">
		<attnum name="area" unit="m2" min="0" max="1.0" val="0.7"/>
		<attnum name="angle" unit="deg" min="0" max="18" val="14"/>
		<attnum name="xpos" unit="m" min="-2.5" max="-1.0" val="-2.01"/>
		<attnum name="zpos" unit="m" min="0.1" max="1.5" val="0.99"/>
	</section>
```

## Aerodynamics in the speed limitation

Let's include the downforce in the equation we previously used to find the speed 
limit in turns. 

$$
\begin{align*}
\underbrace{\frac{m \cdot v^2}{r}}_{\text{Centrifugal force}}& = 
\underbrace{m \cdot g \cdot \mu}_{\text{Friction force}} + 
\underbrace{C_a \cdot v^2 \cdot \mu}_{\text{Aerodynamic downforce}} \\
v^2& = \frac{g \cdot \mu \cdot r}{1 - r \cdot C_a \cdot \mu / m} \\
v& = \sqrt{\frac{g \cdot \mu \cdot r}{1 - min(1, \frac{r \cdot C_a \cdot \mu}{m})}}
\end{align*}
$$

Where $C_a$ is the downforce coefficient. The downforce coefficient can be 
considered a fixed value computed using the density of the air, the area, shape 
and angle of attack of the car's wing and the ride height which is the distance 
between the ground and the car's bottom. Two things actually contribute to 
the downforce: the car wings which act like an inverted airplane wing to keep
the car on the ground, and the ground effect which is cause by the flow of air 
between the car and the ground. The downforce is a performance advantage on 
cars with wings and a specially designed chasis.

When solving the equation for $v$ there is a risk of getting a negative number 
under the square root (a complex number), in case $r \cdot C_a \cdot \mu / m$ 
becomes greater than 1. To avoid that we use the minimum function to put 
a restriction.

Let's start the implementation with the method that initialize the downforce 
coefficient.

```cpp
/**
 * Initialize the aerodynamic coefficient CA of the car.
 */
void CarController::InitCa()
{
	const float air_density = 1.23;
	float rear_wing_area = GfParmGetNum(car->_carHandle, SECT_REARWING, 
					PRM_WINGAREA, (char*) NULL, 0.0);
	float rear_wing_angle = GfParmGetNum(car->_carHandle, SECT_REARWING, 
					PRM_WINGANGLE, (char*) NULL, 0.0);
	float front_ground_effect = GfParmGetNum(car->_carHandle, SECT_AERODYNAMICS, 
					PRM_FCL, (char*) NULL, 0.0);
	float rear_ground_effect = GfParmGetNum(car->_carHandle, SECT_AERODYNAMICS, 
					PRM_RCL, (char*) NULL, 0.0);

	float front_right_height = GfParmGetNum(car->_carHandle, SECT_FRNTRGTWHEEL, 
					PRM_RIDEHEIGHT, (char*) NULL, 0.20);
	float front_left_height = GfParmGetNum(car->_carHandle, SECT_FRNTLFTWHEEL, 
					PRM_RIDEHEIGHT, (char*) NULL, 0.20);
	float rear_right_height = GfParmGetNum(car->_carHandle, SECT_REARRGTWHEEL, 
					PRM_RIDEHEIGHT, (char*) NULL, 0.20);
	float rear_left_height = GfParmGetNum(car->_carHandle, SECT_REARLFTWHEEL, 
					PRM_RIDEHEIGHT, (char*) NULL, 0.20);

	float wing_ca = air_density * rear_wing_area * sin(rear_wing_angle);
	float Cl = front_ground_effect + rear_ground_effect;

	float ride_height = front_right_height + front_left_height 
			+ rear_right_height + rear_left_height;
	float h = 2.0 * exp( -3.0 * pow(ride_height * 1.5, 4));
	
	CA = h * Cl + 4.0 * wing_ca;

}
```

We can now change the last line of `GetAllowedSpeed(tTrackSeg* segment)` from

```cpp
		return sqrt(mu * G * r);
```

to 

```cpp
		return sqrt((mu * G * r) / (1.0 - MIN(1.0, r * CA * mu / full_car_mass)));
``` 

In order to take into account the aerodynamic downforce when we compute the 
maximum allowed speed in turns.
We modify the `NewRace(...)` method to initialize the mass of the car and the 
the downforce coefficient by calling `InitCa()`.

```cpp
void CarController::NewRace(tCarElt* car, tSituation* s)
{
	this->car = car;
	car_mass = GfParmGetNum(car->_carHandle, SECT_CAR, PRM_MASS, NULL, 1000.0);
	InitCa();
}
```

We also have to update the car mass. We do it in the `CarController::Drive(...)` 
function, just after the `memset(...)` line. 

```cpp
//...
    memset((void *)&car->ctrl, 0, sizeof(tCarCtrl)); // reset the values

	full_car_mass = car_mass + car->_fuel;
	float car_angle = CurrentCarAngle(situation);
//...
```

Now let's add the declaration of the new class members in _carcontroller.h_.

```cpp
	private:
		//...
		void InitCa();

		//...

		float car_mass;
		float full_car_mass;
		float CA;

		//...
```

The graph below show a comparison of the maximum speed that can be reach 
in turns in relation to the radius of the turn,
between the old and the new `GetAllowedSpeed(tTrackSeg* segment)` method.

![Comparison]({static}/#)

### Test drive 

lap time

## Aerodynamics in braking

We will make use of the aerodynamic downforce and the drag in our calculations. 
This will allow us to break later and smoothen the braking pattern when driving. 

All right, the next formula maybe intimidating but, take a deep breath and stay 
with me <del>please</del>... Let's rewrite the energy conservation equation 
we used to compute the braking distance, by including the downforce and the 
drag.



$$
\underbrace{\frac{m \cdot v_1^2}{2}}_{\text{Current kinetic energy}} - 
\underbrace{\frac{m \cdot v_2^2}{2}}_{\text{Desired kinetic energy}} = 
\underbrace{m \cdot g \cdot \mu \cdot s + C_a \cdot \int_{s_2}^{s_1} v^2(s) ds \cdot \mu }_{\text{Energy burned by brake}} +
\underbrace{C_w \cdot \int_{s_1}^{s_2} v^2(s) ds}_{\text{air resistance energy (drag)}}
$$

...Ah, that is enough math for today... So here is the braking distance we get when solving the equation.

$$
s = - \frac{ln((c + v_2^2 \cdot d) / (c + v_1^2 \cdot d))}{2 \cdot d}
$$

With $c = g \cdot \mu$ and $d = (C_a \cdot \mu + C_w) / m$: 


$C_w$ is the drag coefficient. The drag coefficient is computed using ...

Here is the implementation of the initialization of $C_w$

```cpp
/**
 * Initialize the aerodynamic drag coefficient Cw
 */
void CarController::InitCw()
{
	float Cx = GfParmGetNum(car->_carHandle, SECT_AERODYNAMICS, 
					PRM_CX, (char*) NULL, 0.0);
	float front_area = GfParmGetNum(car->_carHandle, SECT_AERODYNAMICS, 
					PRM_FRNTAREA, (char*) NULL, 0.0);
	CW = 0.645 * Cx * front_area;
}
```

Now we change the following line from `GetBrake(...)` 

```cpp
			float brake_distance = 
					(pow(speed, 2) - pow(allowed_speed, 2)) / (2.0 * mu * G);
```

to 

```cpp
			float brake_distance = 
					- log((c + pow(allowed_speed, 2) * d) / (c + pow(speed, 2) * d)) / (2 * d); 

```

We declare the new class members in _carcontroller.h_

```cpp
	private:
		//...
		void InitCw();

		//...
		float CW;
```

and we call `InitCw(...)` at the end of `NewRace(...)`.

```cpp
void CarController::NewRace(tCarElt* car, tSituation* s)
{
	//...
	InitCw();
}
```
[Show performance improvement with a plot]
for integral plotting check
* https://matplotlib.org/gallery/showcase/integral.html
* https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html

### Test drive 

Lap time


# Stability Control

During the test drive you may have notice the car wheels slide at some points 
(leaving marks on the track). This is due to accelerating and braking too hard. 
We will use some stability control approaches to alleviate this phenomenon.

Stability controls are mechanisms that improve the stability of a car while driving.
There are different stability control systems among which the Antilock Brake System
(ABS) and Traction Control (TCL) that we will implement to assist our AI agent 
driving.

## Antilock Brake System (ABS)

Wheel lock is caused by ...
Anti wheel locking system we will implement will...

implementation 

```cpp
/**
 * Brakes ABS filter
 */
float CarController::FilterABS(float brake)
{
	if (car->_speed_x < ABS_MIN_SPEED)
		return brake;
	float slip = 0.0;
	int i;
	for (i = 0; i < 4; i++){
		slip += car->_wheelSpinVel(i) * car->_wheelRadius(i) / car->_speed_x;
	}
	slip = slip / 4.0;
	if (slip < ABS_SLIP){
		brake = brake * slip;
	}
	return brake;
}
```

We apply the filter by adding the following line at the end of `GetBrake(...)`
just above the return statement,

```cpp
float CarController::GetBrake()
{
	// ...
	brake = FilterABS(brake);
	return brake;
}
```

We also add the new constant to _carcontroller.cpp_

```cpp
const float CarController::ABS_SLIP = 0.9; // [-] range [0.95..0.3]
const float CarController::ABS_MIN_SPEED = 3.0; // [m/s]
```

and we update _carcontroller.h_ with the new class members. 

```cpp
// ...
	public:
		// ...
		static const float ABS_SLIP;
		static const float ABS_MIN_SPEED;

	private:
		// ...
		float FilterABS(float brake);

// ...
```


## Traction Control (TCL)

Wheel slips when ...

Implementation ... 
used a pointer to function 

```cpp
/**
 * Acceleration TCL filter
 */
float CarController::FilterTCL(float acceleration)
{
	if (car->_speed_x < TCL_MIN_SPEED)
		return acceleration;
	float wheel_speed = (this->*GetDrivenWheelSpeed)();
	float slip = car->_speed_x / wheel_speed;
	if (slip < TCL_SLIP) {
		acceleration = 0.0;
	}
	return acceleration;
}
```

Select spinning wheel... function to point to

```cpp
/**
 * Select the right spinning wheel speed calculation for the TCL filter
 */
void CarController::InitDrivenWheelSpeed()
{
	const char* train_type = GfParmGetStr(car->_carHandle, SECT_DRIVETRAIN, 
					PRM_TYPE, VAL_TRANS_RWD);
	if(strcmp(train_type, VAL_TRANS_RWD) == 0) {
		GetDrivenWheelSpeed = &CarController::GetWheelSpeedRWD;	
	} else if (strcmp(train_type, VAL_TRANS_FWD) == 0){
		GetDrivenWheelSpeed = &CarController::GetWheelSpeedFWD;	
	} else if (strcmp(train_type, VAL_TRANS_4WD) == 0){
		GetDrivenWheelSpeed = &CarController::GetWheelSpeed4WD;
	}
}
```
Computing the wheel speed for different train type

```cpp
/**
 * Get the driven wheel speed for Rear Wheel Drive (RWD)
 */
float CarController::GetWheelSpeedRWD()
{
	return (car->_wheelSpinVel(REAR_RGT) + car->_wheelSpinVel(REAR_LFT)) * 
			car->_wheelRadius(REAR_LFT) / 2.0;
}


/**
 * Get the driven wheel speed for Front Wheel Drive (FWD)
 */
float CarController::GetWheelSpeedFWD()
{
	return (car->_wheelSpinVel(FRNT_RGT) + car->_wheelSpinVel(FRNT_LFT)) * 
			car->_wheelRadius(FRNT_LFT) / 2.0;
}

/**
 * Get the driven wheel speed for Four Wheel Drive (4WD)
 */
float CarController::GetWheelSpeed4WD()
{
	return ( (car->_wheelSpinVel(REAR_RGT) + car->_wheelSpinVel(REAR_LFT)) * 
				car->_wheelRadius(REAR_LFT) +
			(car->_wheelSpinVel(FRNT_RGT) + car->_wheelSpinVel(FRNT_LFT)) * 
				car->_wheelRadius(FRNT_LFT) ) / 4.0;
}
```

To apply the TCL filter add the following line at the end of  `GetAcceleration()`
before the `return` statement.

```cpp
float CarController::GetAcceleration()
{
	// ...
	acceleration = FilterTCL(acceleration);
	return acceleration;
}
```

add `InitDrivenWheelSpeed();` in `NewRace(...)` to set the wheel speed 
calculation pointer function to the right one.

```cpp
void CarController::NewRace(tCarElt* car, tSituation* s)
{
	// ...
	InitDrivenWheelSpeed();
}
```

We define the new constant in _carcontroller.cpp_,

```cpp
const float CarController::TCL_SLIP = 0.9; // [-] range [0.95..0.3]
const float CarController::TCL_MIN_SPEED = 3.0; // [m/s]
```

and add the new class member declaration in _carcontroller.h_.

```cpp
// ...
	public: 
		// ...
		static const float TCL_SLIP;
		static const float TCL_MIN_SPEED;
		
	private:
		// ...
		float FilterTCL(float acceleration);
		float GetWheelSpeedRWD();
		float GetWheelSpeedFWD();
		float GetWheelSpeed4WD();
		void InitDrivenWheelSpeed();

		float (CarController::*GetDrivenWheelSpeed)();
// ...
```

### Test Drive


